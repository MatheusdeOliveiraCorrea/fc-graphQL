package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.42

import (
	"context"
	"exemplo.com/graph/model"
)

// CriarCategoria is the resolver for the criarCategoria field.
func (r *mutationResolver) CriarCategoria(ctx context.Context, input model.NovaCategoria) (*model.Categoria, error) {
	category, err := r.CategoryDB.Create(input.Nome, *input.Descricao)
	if err != nil {
		return nil, err
	}
	return &model.Categoria{
		ID:          category.ID,
		Nome:        category.Name,
		Descricao: &category.Description,
	}, nil
}

// CriarCurso is the resolver for the criarCurso field.
func (r *mutationResolver) CriarCurso(ctx context.Context, input model.NovoCurso) (*model.Curso, error) {
	course, err := r.CourseDB.Create(input.Nome, input.Descricao, input.IDCategoria)
	if err != nil {
		return nil, err
	}
	return &model.Curso{
		ID:          course.ID,
		Nome:        course.Name,
		Descricao: &course.Description,
	}, nil
}

// Categorias is the resolver for the categorias field.
func (r *queryResolver) Categorias(ctx context.Context) ([]*model.Categoria, error) {
	categories, err := r.CategoryDB.FindAll()
	if err != nil {
		return nil, err
	}

	var categoriesModel []*model.Categoria
	for _, category := range categories {
		categoriesModel = append(categoriesModel, &model.Categoria{
			ID:          category.ID,
			Nome:        category.Name,
			Descricao: &category.Description,
		})
	}
	return categoriesModel, nil
}

// Cursos is the resolver for the cursos field.
func (r *queryResolver) Cursos(ctx context.Context) ([]*model.Curso, error) {
	courses, err := r.CourseDB.FindAll()
	if err != nil {
		return nil, err
	}
	var coursesModel []*model.Curso
	for _, course := range courses {
		coursesModel = append(coursesModel, &model.Curso{
			ID:          course.ID,
			Nome:        course.Name,
			Descricao: &course.Description,
		})
	}
	return coursesModel, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }